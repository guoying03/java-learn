# 数组冒泡排序
冒泡排序原理：相邻的两位数做比较，1和2比较，2和3比较 3和4比较 4和5比较，这样依次比较，
如果前面的数小于后面的，不做操作， 如果前面的数大于后面的数则调换两个数字的位置，
所以一层循环能挑出一个当前数组参加比较数字中的最大的数字，并将其排到数组的最末尾。
但是一层循环根本不够用，只能挑选出一个最大数，数组中其他的主子还没有正确的排序。
这里遵循一个原理就是数组里面有length个数字，要进行length-1次循环。至于为什么要this.length-i，
是因为第一个比较7个数字，第二个只要比较前6个就行了，第7个肯定时最大的了。这里要着重强调为什么会有2个for循环，
为什么要用this.length-i。


# 抽象类概念
 1.使用abstract修饰的方法，没有方法体（没有{}），只有方法声明，抽象方法强制子类覆写
 2.一旦一个类有了抽象方法，那么类也必须声明为抽象类；但是抽象类可以没有抽象方法
 3.抽象类不能实列化，不能创建对象（抽象类就是用来继承的，相当于顶一个方法模板，让子类具体实现方法）
 # 抽象类的体现：模板模式
 1.抽象类是多个具体子类抽象出来的父类，具有高层次的抽象性；以该抽象类作为子类的模板可以避免子类设计的随意性
 2.抽象类的体现主要就是模板模式设计，抽象类作为多个子类的通用模板，子类在抽象类的基础上进行拓展，但是子类在总体上大致保留抽象类的行为方式。
 3.编写一个抽象父类，该父类提供了多个子类的通用方法，并吧一个或多个抽象方法留给子类去实现，这就是模板设计模式
 abstract calss Graph{
 /**
 * 求图形的周长
 * @return 图形的周长
 */
 public abstract double getCircumference();
 /**
 * 求图形的面积
 * @return 图形的面积
 */
 public abstract double getAera();
 }